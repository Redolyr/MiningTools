// Date: 2013/12/25 21:46:37
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package MiningTools.Items.Model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

/**
 *
 * @author Redolyr75724
 *
 */
public class ModelItemMiningTools extends ModelBase
{
    public ModelRenderer Stick;
    public ModelRenderer EnderEye;
    public ModelRenderer PickaxePats1;
    public ModelRenderer PickaxePats2;
    public ModelRenderer PickaxePats3;
    public ModelRenderer MainCenter;
    public ModelRenderer AxeUp;
    public ModelRenderer AxeLeft;
    public ModelRenderer AxeRight;
    public ModelRenderer AxeDown;
    public ModelRenderer Forward;
    public ModelItemMiningTools()
    {
        textureWidth = 64;
        textureHeight = 32;
        Stick = new ModelRenderer(this, 0, 0);
        Stick.addBox(0F, 0F, 0F, 2, 14, 2);
        Stick.setRotationPoint(-1F, 0F, -1F);
        Stick.setTextureSize(64, 32);
        Stick.mirror = true;
        setRotation(Stick, 0F, 0F, 0F);
        EnderEye = new ModelRenderer(this, 8, 0);
        EnderEye.addBox(0F, 0F, 0F, 3, 3, 3);
        EnderEye.setRotationPoint(-1.5F, 13.5F, -1.5F);
        EnderEye.setTextureSize(64, 32);
        EnderEye.mirror = true;
        setRotation(EnderEye, 0F, 0F, 0F);
        PickaxePats1 = new ModelRenderer(this, 20, 0);
        PickaxePats1.addBox(0F, 0F, 0F, 10, 2, 2);
        PickaxePats1.setRotationPoint(-4F, -2F, -1F);
        PickaxePats1.setTextureSize(64, 32);
        PickaxePats1.mirror = true;
        setRotation(PickaxePats1, 0F, 0F, 0F);
        PickaxePats2 = new ModelRenderer(this, 44, 0);
        PickaxePats2.addBox(0F, 0F, 0F, 5, 2, 2);
        PickaxePats2.setRotationPoint(6F, -2F, -1F);
        PickaxePats2.setTextureSize(64, 32);
        PickaxePats2.mirror = true;
        setRotation(PickaxePats2, 0F, 0F, 0.2617994F);
        PickaxePats3 = new ModelRenderer(this, 20, 4);
        PickaxePats3.addBox(0F, 0F, 0F, 3, 1, 2);
        PickaxePats3.setRotationPoint(10F, 0F, -1F);
        PickaxePats3.setTextureSize(64, 32);
        PickaxePats3.mirror = true;
        setRotation(PickaxePats3, 0F, 0F, 0.4363323F);
        MainCenter = new ModelRenderer(this, 30, 4);
        MainCenter.addBox(0F, 0F, 0F, 4, 6, 4);
        MainCenter.setRotationPoint(-8F, -5F, -2F);
        MainCenter.setTextureSize(64, 32);
        MainCenter.mirror = true;
        setRotation(MainCenter, 0F, 0F, 0F);
        AxeUp = new ModelRenderer(this, 30, 14);
        AxeUp.addBox(0F, 0F, 0F, 2, 6, 4);
        AxeUp.setRotationPoint(-4F, -9F, -2F);
        AxeUp.setTextureSize(64, 32);
        AxeUp.mirror = true;
        setRotation(AxeUp, 0F, 0F, ((float)Math.PI / 4F));
        AxeLeft = new ModelRenderer(this, 30, 2);
        AxeLeft.addBox(0F, 0F, 0F, 2, 6, 6);
        AxeLeft.setRotationPoint(-3F, -5F, -5F);
        AxeLeft.setTextureSize(64, 32);
        AxeLeft.mirror = true;
        setRotation(AxeLeft, 0F, -1.047198F, 0F);
        AxeRight = new ModelRenderer(this, 30, 2);
        AxeRight.addBox(0F, 0F, 0F, 2, 6, 6);
        AxeRight.setRotationPoint(-8F, -5F, 2F);
        AxeRight.setTextureSize(64, 32);
        AxeRight.mirror = true;
        setRotation(AxeRight, 0F, 1.047198F, 0F);
        AxeDown = new ModelRenderer(this, 30, 14);
        AxeDown.addBox(0F, 0F, 0F, 2, 6, 4);
        AxeDown.setRotationPoint(-8F, 1F, -2F);
        AxeDown.setTextureSize(64, 32);
        AxeDown.mirror = true;
        setRotation(AxeDown, 0F, 0F, -((float)Math.PI / 4F));
        Forward = new ModelRenderer(this, 8, 6);
        Forward.addBox(0F, 0F, 0F, 1, 4, 2);
        Forward.setRotationPoint(-8.5F, -4F, -1F);
        Forward.setTextureSize(64, 32);
        Forward.mirror = true;
        setRotation(Forward, 0F, 0F, 0F);
    }
    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
    {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5, entity);
        Stick.render(f5);
        EnderEye.render(f5);
        PickaxePats1.render(f5);
        PickaxePats2.render(f5);
        PickaxePats3.render(f5);
        MainCenter.render(f5);
        AxeUp.render(f5);
        AxeLeft.render(f5);
        AxeRight.render(f5);
        AxeDown.render(f5);
        Forward.render(f5);
        /*		Stick.addBox(0F, 0F, 0F, 2, 14, 2);
        		EnderEye.addBox(0F, 0F, 0F, 3, 3, 3);
        		PickaxePats1.addBox(0F, 0F, 0F, 10, 2, 2);
        		PickaxePats2.addBox(0F, 0F, 0F, 5, 2, 2);
        		PickaxePats3.addBox(0F, 0F, 0F, 3, 1, 2);
        		MainCenter.addBox(0F, 0F, 0F, 4, 6, 4);
        		AxeUp.addBox(0F, 0F, 0F, 2, 6, 4);
        		AxeLeft.addBox(0F, 0F, 0F, 2, 6, 6);
        		AxeRight.addBox(0F, 0F, 0F, 2, 6, 6);
        		AxeDown.addBox(0F, 0F, 0F, 2, 6, 4);
        		Forward.addBox(0F, 0F, 0F, 1, 4, 2);*/
    }
    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }
    public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
    {
        super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    }
}
